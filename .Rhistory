# Funcion para calcular el tama単o de la secuencia
sizeDna <- function(chain){
length(chain)
}
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
n <- readline("Ingresa el tama単o de la secuencia: ")
chain <- generarAdn(n)
percentageBase(chain)
knitr::opts_chunk$set(echo = TRUE)
n <- readline("Ingresa el tama単o de la secuencia: ")
# Funcion generar la secuencia
generarAdn = function(n){
bases <- c("A", "T", "C", "G")
sample(bases, n, TRUE)
}
chain <- generarAdn(n)
# Funcion para calcular el tama単o de la secuencia
sizeDna <- function(chain){
length(chain)
}
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
percentageBase(chain)
?list
l <- c()
for i in 1:4{
temp <- readline("Ingresa algo: ")
l
}
l
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
l
}
u
?print
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
print(l)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
print(l);
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
l <- c(l, readline("Ingresa algo: "))
}
rm
clc
l <- c()
rm(all())
rm(objects())
rm(chain)
rm(i, n, temp, v, v1)
for (i in 1:4){}
rm(i)
for(i in 1:4){
l <- c(l, readline("Ingresa algo: "))
}
isSubstring <- function(stf, s){
slength <- length(s)
stflength <- length(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(s[i + j] != stf[j])
break
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
isSubstring(startCodon, chain)
chain[2]
chain <- "AAAJEHAUGJEO" #7
isSubstring(startCodon, chain)
substring(startCodon, 1, 1)
substring(startCodon, 2, 2)
isSubstring <- function(stf, s){
slength <- length(s)
stflength <- length(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
isSubstring <- function(stf, s){
slength <- length(s)
stflength <- length(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
print(substring(s, i+j, i+j))
print(substring(stf, j, j))
if(substring(s, i+j, i+j) != substring(stf, j, j)){
break
}
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
"A" == "A"
"A" != "A"
isSubstring <- function(stf, s){
slength <- length(s)
stflength <- length(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
print(substring(s, i+j, i+j))
print(substring(stf, j, j))
print(substring(s, i+j, i+j) != substring(stf, j, j))
if(substring(s, i+j, i+j) != substring(stf, j, j)){
break
}
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
length(chain)
nchar(chain)
isSubstring <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
print(substring(s, i+j, i+j))
print(substring(stf, j, j))
print(substring(s, i+j, i+j) != substring(stf, j, j))
if(substring(s, i+j, i+j) != substring(stf, j, j)){
break
}
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
isSubstring <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
substrinc(chain, 6, 9)
substring(chain, 6, 9)
substring(chain, 7, 9)
isSubstring <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i+1)
}
return(-1) # No encontrado
}
isSubstring(startCodon, chain)
rm(isSubstring)
find <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i+1)
}
return(-1) # No encontrado
}
chain <- "AUGUGA" #7
find(startCodon, chain)
class(chain) != "character"
class(chain)
is.character(chain)
1:3:12
find <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
if(substring(stf, 1, slength) == substring(s, 1, slength))
return(1)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i+1)
}
return(-1) # No encontrado
}
find(startCodon, chain)
find <- function(stf, s){
slength <- nchar(s)
stflength <- nchar(stf)
if(substring(stf, 1, stflength) == substring(s, 1, stflength))
return(1)
for (i in 1:(slength - stflength)){
for(j in 1:stflength){
if(substring(s, i+j, i+j) != substring(stf, j, j))
break
}
if (j == stflength)
return(i+1)
}
return(-1) # No encontrado
}
find(startCodon, chain)
chain <- "GAUGUGA" #7
find(startCodon, chain)
chain <- "GGAUGUGA" #7
find(startCodon, chain)
chain <- "UGAAUG" #7
find(startCodon, chain)
git add .
getwd()
setwd("G:/Mi unidad/ESCUELA/Profesional/2 Semestre/Biologia_Computacional/EjerciciosDNAR/repo/EjerciciosR/ActividadColaborativaR.Rmd")
setwd("G:/Mi unidad/ESCUELA/Profesional/2 Semestre/Biologia_Computacional/EjerciciosDNAR/repo/EjerciciosR")
getwd()
for(l in chain){}
for (l in chain){
print(l)
}
?paste()
knitr::opts_chunk$set(echo = TRUE)
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
if(nchar(codon) == 3){
prots <- c(prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGCCAUAUUAG")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
if(nchar(codon) == 3){
prots <- c(prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGCCAUAUUAG")
prot = function(codon){
switch(codon,
"UUU" = "Phe", "UUC" = "Phe", "UUA" = "Leu", "UUG" = "Leu",
"CUU" = "Leu", "CUC" = "Leu", "CUA" = "Leu", "CUG" = "Leu",
"AUU" = "Ile", "AUC" = "Ile", "AUA" = "Ile", "AUG" = "Met",
"GUU" = "Val", "GUC" = "Val", "GUA" = "Val", "GUG" = "Val",
"UCU" = "Ser", "UCC" = "Ser", "UCA" = "Ser", "UCG" = "Ser",
"CCU" = "Pro", "CCC" = "Pro", "CCA" = "Pro", "CCG" = "Pro",
"ACU" = "Thr", "ACC" = "Thr", "ACA" = "Thr", "ACG" = "Thr",
"GCU" = "Ala", "GCU" = "Ala", "GCA" = "Ala", "GCG" = "Ala",
"UAU" = "Tyr", "UAC" = "Tyr", "CAU" = "His", "CAC" = "His",
"CAA" = "Gin", "CAG" = "Gin", "AAU" = "Asn", "AAC" = "Asn",
"AAU" = "Asn", "AAC" = "Asn", "AAA" = "Lys", "AAG" = "Lys",
"GAU" = "Asp", "GAC" = "Asp", "GAA" = "Glu", "GAG" = "Glu",
"UGU" = "Cys", "UGC" = "Cys", "CGU" = "Arg", "CGC" = "Arg",
"CGA" = "Arg", "CGG" = "Arg", "AGU" = "Ser", "AGC" = "Ser",
"AGA" = "Arg", "AGG" = "Arg", "GGU" = "Gly", "GGC" = "Gly",
"GGA" = "Gly", "GGG" = "Gly", "AUG" = "Met", "-")
}
rnaProt("AUGCCAUAUUAG")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
if(nchar(codon) == 3){
prots <- c(c, prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGCCAUAUUAG")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
if(nchar(codon) == 3){
prots <- c(c, prot(codon) [[1]])
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGCCAUAUUAG")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(chain, "")[[1]]
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
print(codon)
if(nchar(codon) == 3){
prots <- c(c, prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGUUA")
?toUpper()
?toupper()
?strsplit()
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(toupper(chain), "")[[1]]
print(chain)
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
print(codon)
if(nchar(codon) == 3){
prots <- c(c, prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGUUA")
rnaProt("AUGUUA")[1]
rnaProt("AUGUUA")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(toupper(chain), "")[[1]]
print(chain)
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
print(codon)
if(nchar(codon) == 3){
prots <- c(c, prot(codon))
print(prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGUUA")
for(el in rnaProt("AUGUUA"))
print(el)
protsChain <- rnaProt("AUGUUA")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(toupper(chain), "")[[1]]
print(chain)
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
print(codon)
if(nchar(codon) == 3){
prots <- c(prots, prot(codon))
print(prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
protsChain <- rnaProt("AUGUUA")
rnaProt = function(chain){
if(class(chain) == "character"){
chain <- strsplit(toupper(chain), "")[[1]]
}
codon <- character()
prots <- c()
for(b in chain){
codon <- paste(codon, b, sep = "")
if(nchar(codon) == 3){
prots <- c(prots, prot(codon))
if (prot(codon) == "-") {
break
}
codon <- character()
}
}
prots
}
rnaProt("AUGUUA")
rnaProt("AUGUUAC")
rnaProt("AUGUUAUGA")
