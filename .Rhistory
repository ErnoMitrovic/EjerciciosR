}
temp
} else return
}
print(maximum(c())
maximum <- function(a){
if (length(a) > 0){
temp = a[1]
for (el in a){
if (temp < el) temp <- el
}
temp
} else return
}
print(maximum(0))
maximum <- function(a){
if (length(a) > 0){
temp = a[1]
for (el in a){
if (temp < el) temp <- el
}
temp
} else return
}
print(maximum(seq(1,1,0)))
maximum <- function(a){
if (length(a) > 0){
temp = a[1]
for (el in a){
if (temp < el) temp <- el
}
temp
} else return
}
minimum <- function(a){
if (length(a) > 0){
temp = a[1]
for (el in a){
if (temp > el) temp <- el
}
temp
} else return
}
print(maximum(c(10, 20, 30, 4, 50, -60)))
print(minimum(c(10, 20, 30, 4, 50, -60)))
multiplica <- function(a, b){
if (length(a) == length(b)){
arr <- numerical(length(a))
for (i in 1:length(a)){
arr[i] <- a[i] * b[i]
}
arr
}
}
print(multiplica(c(10, 20), c(3,4)))
multiplica <- function(a, b){
if (length(a) == length(b)){
arr <- numeric(length(a))
for (i in 1:length(a)){
arr[i] <- a[i] * b[i]
}
arr
}
}
print(multiplica(c(10, 20), c(3,4)))
cuenta <- function(arr, n){
count <- 0
for (el in arr){
if(el == n) count <- count + 1
}
count
}
print(cuenta(c(10, 20, 10, 7, 24,7, 5),7))
enesimo <- function(arr, n){
arr[seq(1, length(arr), by=n)]
}
v <- 1:100
print(enesimo(v, 5))
enesimo <- function(arr, n) arr[seq(1, length(arr), by=n)]
v <- 3:100
print(enesimo(v, 5))
est.x <- c(mean(v1), sqrt(var(v1)), var(v1))
rm(est.x)
v1 <- c(10, 11, 13, -1, 6, 3)
est.x <- c(mean(v1), sqrt(var(v1)), var(v1))
rm(est.x)
rm(objects())
knitr::opts_chunk$set(echo = TRUE)
n <- readline("Ingresa el tamaño de la secuencia: ")
# Funcion generar la secuencia
generarAdn = function(n){
bases <- c("A", "T", "C", "G")
sample(bases, n, TRUE)
}
generarAdn(n)
n <- readline("Ingresa el tamaño de la secuencia: ")
# Funcion generar la secuencia
generarAdn = function(n){
bases <- c("A", "T", "C", "G")
sample(bases, n, TRUE)
}
generarAdn(n)
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases(i)) percentages(i) <- percentages(i) + 1
}
}
for (el in percentages){
el <- el / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
percentages(generarAdn(n))
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases(i)) percentages(i) <- percentages(i) + 1
}
}
for (el in percentages){
el <- el / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
percentageBase(generarAdn(n))
# Funcion para calcular el tamaño de la secuencia
sizeDna <- function(chain){
length(chain)
}
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- length(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases(i)) percentages(i) <- percentages(i) + 1
}
}
for (el in percentages){
el <- el / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
percentageBase(generarAdn(n))
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- length(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (el in percentages){
el <- el / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
percentageBase(generarAdn(n))
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- length(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (el in percentages){
el <- el / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
chain <- generarAdn(n)
percentageBase(chain)
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- length(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
chain <- generarAdn(n)
percentageBase(chain)
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- length(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
chain <- generarAdn(n)
chain
percentageBase(chain)
n <- readline("Ingresa el tamaño de la secuencia: ")
# Funcion generar la secuencia
generarAdn = function(n){
bases <- c("A", "T", "C", "G")
sample(bases, n, TRUE)
}
generarAdn(n)
# Funcion para calcular el tamaño de la secuencia
sizeDna <- function(chain){
length(chain)
}
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
n <- readline("Ingresa el tamaño de la secuencia: ")
chain <- generarAdn(n)
percentageBase(chain)
knitr::opts_chunk$set(echo = TRUE)
n <- readline("Ingresa el tamaño de la secuencia: ")
# Funcion generar la secuencia
generarAdn = function(n){
bases <- c("A", "T", "C", "G")
sample(bases, n, TRUE)
}
chain <- generarAdn(n)
# Funcion para calcular el tamaño de la secuencia
sizeDna <- function(chain){
length(chain)
}
# Funcion para calcular el porcentaje de cada base nitrogenada
percentageBase <- function(chain){
size <- sizeDna(chain)
bases <- c("A", "T", "C", "G")
percentages <- numeric(4)
for (el in chain) {
for (i in 1:4){
if (el == bases[i]) percentages[i] <- percentages[i] + 1
}
}
for (i in 1:4){
percentages[i] = percentages[i] / size
}
percentages
}
percentageBase(chain)
?list
l <- c()
for i in 1:4{
temp <- readline("Ingresa algo: ")
l
}
l
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
l
}
u
?print
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
print(l)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
print(l);
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
temp <- readline("Ingresa algo: ")
l <- c(l, temp)
}
l <- c()
for (i in 1:4){
l <- c(l, readline("Ingresa algo: "))
}
rm
clc
l <- c()
rm(all())
rm(objects())
rm(chain)
rm(i, n, temp, v, v1)
for (i in 1:4){}
rm(i)
for(i in 1:4){
l <- c(l, readline("Ingresa algo: "))
}
wd()
cwd
pwd
getwd()
setwd("G:\Mi unidad\ESCUELA\Profesional\2 Semestre\Biologia_Computacional\EjerciciosDNAR\repo\EjerciciosR")
setwd(G:\Mi unidad\ESCUELA\Profesional\2 Semestre\Biologia_Computacional\EjerciciosDNAR\repo\EjerciciosR)
setwd("G:/Mi unidad/ESCUELA/Profesional/2 Semestre/Biologia_Computacional/EjerciciosDNAR/repo/EjerciciosR")
getwd()
rm(i, l)
?rcauchy()
?cat()
vect <- c("b","QQ","a","A","bb")
for(ch in vect){
cat(ch,":", switch(EXPR = ch, a = 1, b = 2:3), "\n")
cat(ch,":", switch(EXPR = ch, a =, A = 1, b = 2:3, "Otherwise: last"),"\n")
}
vect <- c("b","QQ","a","A","bb")
for(ch in vect){
cat(ch,":", switch(EXPR = ch, a = 1, b = 2:3), "\n")
}
cat(ch,":", switch(EXPR = ch, a =, A = 1, b = 2:3, "Otherwise: last"),"\n")
vect <- c("b","QQ","a","A","bb")
for(ch in vect){
cat(ch,":", switch(EXPR = ch, a =, A = 1, b = 2:3, "Otherwise: last"),"\n")
}
?gl()
gl(2, 8, labels = c("Control", "Treat"))
gl(2, 2, 20)
gl(2, 2, 20, ordered = TRUE)
clear
x <- 1
print(+x)
x <- 1
for (i in 1:5){
-x
}
print(x)
x <- 1
for (i in 1:5){
x--
}
print(x)
x <- 1
for (i in 1:5){
+x
}
print(x)
getwd()
val <- c("A", "T", G)
val <- c("A", "T", "G")
?toString()
toString()
toString(val)
?join()
?substr()
val <- c(val, "A", "T", "T", "A")
val
substr(val, 2, 4)
typeof(val)
substr(val, 1, 4)
substr(val, 1, 3)
val <- c("1", "2", "3", "4", "5")
val
substr(val, 1, 3)
clean <- ""
for l in val{
clean <- paste(clean, l, sep ="")
}
for (l in val){
clean <- paste(clean, l, sep="")
}
substr(clean, 2, 4)
?concat
rm(clean, ch, i, l, val, vect)
rm(x)
getwd()
?grep()
grep("A+", "ABC")
grep("A+", "BC")
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(grep("ATG", chain) == 0) -1 else i
}
startCodon <- "AUG"
chain <- readline("")
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(grep("ATG", chain) == 0) -1 else i
}
startCodon <- "AUG"
chain <- readline("")
startCodon <- "AUG"
chain <- readline("")
chain <- readline("")
startCodonIndex(chain)
startCodon <- "AUG"
chain <- readline("")
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(grep("ATG", chain) == 0) -1 else i
}
startCodon <- "AUG"
chain <- readline("")
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(i == integer(0) -1 else i
}
startCodon <- "AUG"
chain <- readline("")
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(i == integer(0)) -1 else i
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- grep("ATG", chain)
if(i == integer(0)) -1 else i
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- grep("ATG", chain)
i
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- grep("ATG", chain)
i
}
?gregexpr()
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- gregexpr("ATG", chain)
i
}
?unlist()
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- unlist(gregexpr("ATG", chain))
i
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- unlist(gregexpr("J", chain))
i
}
startCodon <- "AUG"
chain <- "AAAJEHAUGJEO" #7
startCodonIndex(chain)
startCodonIndex = function(chain){
i <- unlist(gregexpr(startCodon, chain))
i
}
chain[4:10]
substr(chain, 4, 10)
?gregexp()
?gregexpr()
